/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// macros
  
   // + slice angle
  // - slice angle
  // side length macro
  // + height macro
 // - height macro
  // step position macro
 // + x-side of slice
 // + y-side of slice
 // - y-side of slice
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices
(
    (0  0  -0.5) // 0
    (0.499923847578196 -0.00872620321864176 -0.5) // 1
    (0.499923847578196 -0.00872620321864176 0.0) // 2
    (0  0  0.0) // 3
    (0.499923847578196 0.00872620321864176 -0.5) // 4
    (0.499923847578196 0.00872620321864176 0.0) // 5
    (0.499923847578196 -0.00872620321864176 0.5) // 6
    (0  0  0.5) // 7
    (0.499923847578196 0.00872620321864176 0.5) // 8
);

blocks
(
    hex (0 1 4 0 3 2 5 3) (128 1 128) simpleGrading (4 1 0.25) // lower half
    hex (3 2 5 3 7 6 8 7) (128 1 128) simpleGrading (4 1 4) // upper half
);

edges
(
);

boundary
(
    axisWall
    {
        type empty;
        faces
        (
            (0 3 3 0)
            (3 7 7 3)
        );
    }
    topWall
    {
        type wall;
        faces
        (
            (7 6 8 7)
        );
    }
    bottomWall
    {
        type wall;
        faces
        (
            (0 4 1 0)
        );
    }
    roundWall
    {
        type wall;
        faces
        (
            (1 4 5 2)
            (2 5 8 6)
        );
    }
    ymWall
    {
        type wedge;
        faces
        (
            (0 1 2 3)
            (3 2 6 7)
        );
    }
    ypWall
    {
        type wedge;
        faces
        (
            (4 0 3 5)
            (5 3 7 8)
        );
    }
);

mergePatchPairs
(
);


// ************************************************************************* //
